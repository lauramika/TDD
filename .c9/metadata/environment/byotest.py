{"filter":false,"title":"byotest.py","tooltip":"/byotest.py","undoManager":{"mark":2,"position":2,"stack":[[{"start":{"row":74,"column":18},"end":{"row":74,"column":19},"action":"remove","lines":["."],"id":2},{"start":{"row":74,"column":17},"end":{"row":74,"column":18},"action":"remove","lines":["c"]},{"start":{"row":74,"column":16},"end":{"row":74,"column":17},"action":"remove","lines":["n"]},{"start":{"row":74,"column":15},"end":{"row":74,"column":16},"action":"remove","lines":["I"]},{"start":{"row":74,"column":14},"end":{"row":74,"column":15},"action":"remove","lines":[" "]},{"start":{"row":74,"column":13},"end":{"row":74,"column":14},"action":"remove","lines":[","]},{"start":{"row":74,"column":12},"end":{"row":74,"column":13},"action":"remove","lines":["b"]},{"start":{"row":74,"column":11},"end":{"row":74,"column":12},"action":"remove","lines":["u"]},{"start":{"row":74,"column":10},"end":{"row":74,"column":11},"action":"remove","lines":["H"]},{"start":{"row":74,"column":9},"end":{"row":74,"column":10},"action":"remove","lines":["t"]},{"start":{"row":74,"column":8},"end":{"row":74,"column":9},"action":"remove","lines":["i"]},{"start":{"row":74,"column":7},"end":{"row":74,"column":8},"action":"remove","lines":["G"]},{"start":{"row":74,"column":6},"end":{"row":74,"column":7},"action":"remove","lines":[" "]}],[{"start":{"row":74,"column":5},"end":{"row":74,"column":6},"action":"remove","lines":["9"],"id":3},{"start":{"row":74,"column":4},"end":{"row":74,"column":5},"action":"remove","lines":["1"]},{"start":{"row":74,"column":3},"end":{"row":74,"column":4},"action":"remove","lines":["0"]},{"start":{"row":74,"column":2},"end":{"row":74,"column":3},"action":"remove","lines":["2"]},{"start":{"row":74,"column":1},"end":{"row":74,"column":2},"action":"remove","lines":[" "]},{"start":{"row":74,"column":0},"end":{"row":74,"column":1},"action":"remove","lines":["Â©"]},{"start":{"row":73,"column":24},"end":{"row":74,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":73,"column":24},"action":"remove","lines":["\"\"\"","Solution to the third challenge in the `Build Your Own Test Framework` unit","found in the `Test Driven Development with Python lesson`","NOTE: The solution found in this file is one of the many potential solutions","that can be used to achieve the end result expected by the challenge in the","lesson.","\"\"\"","","","def test_are_equal(actual, expected):","    \"\"\"","    Test that two values are equal. Raises AssertionError if both values are","    not equal.","    `actual` is the actual value produced","    `expected` is the value that was supposed to be produced","    \"\"\"","    assert expected == actual, \"Expected {0}, got {1}\".format(","        expected, actual)","","","def test_not_equal(a, b):","    \"\"\"","    Test that two values are not equal. Raises AssertionError if both values","    are in fact equal.","    `a` is the first value","    `b` is the second value","    \"\"\"","    assert a != b, \"{0} is equal to {1}\".format(a, b)","","","def test_is_in(collection, item):","    \"\"\"","    Check to ensure that a given collection contains a given value. Raises","    AssertionError if `item` is not in `collection`","    `collection` is the collection to be tested","    `item` is the item that is being searched for","    \"\"\"","    assert item in collection, \"{0} does not contain {1}\".format(","        collection, item)","","","def test_not_in(collection, item):","    \"\"\"","    Check to ensure that a given collection does not contain a given value.","    Raises AssertionError if the `item` is found in `collection`","    `collection` is the collection in question","    `item` is the thing that we want to check for","    \"\"\"","    assert item not in collection, \"{0} is in {1}\".format(","        item, collection)","","","def test_between(upper_limit, lower_limit, actual):","    \"\"\"","    Check to ensure that a number is between two other numbers. Raises","    AssertionError if the number is not between the other two numbers","    \"\"\"","    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)","","","# Test to fail the `test_are_equal` function","# test_are_equal(number_of_evens([1,2,3,4,5]), 2)","","# Test to fail the `test_not_equal` function","# test_not_equal(0, 0)","","# Test to fail the `test_is_in` function","# test_is_in([1], 2)","","# Test to fail the `test_not_in` function","# test_not_in([1], 1)","","# Test to fail the `test_between` function","test_between(10, 1, 200)"],"id":4},{"start":{"row":0,"column":0},"end":{"row":48,"column":122},"action":"insert","lines":["def test_are_equal(actual, expected):","    \"\"\"","    Test that two values are equal. Raises AssertionError if both values are","    not equal.","    `actual` is the actual value produced","    `expected` is the value that was supposed to be produced","    \"\"\"","    assert expected == actual, \"Expected {0}, got {1}\".format(","        expected, actual)","","","def test_not_equal(a, b):","    \"\"\"","    Test that two values are not equal. Raises AssertionError if both values","    are in fact equal.","    `a` is the first value","    `b` is the second value","    \"\"\"","    assert a != b, \"{0} is equal to {1}\".format(a, b)","","","def test_is_in(collection, item):","    \"\"\"","    Check to ensure that a given collection contains a given value. Raises","    AssertionError if `item` is not in `collection`","    `collection` is the collection to be tested","    `item` is the item that is being searched for","    \"\"\"","    assert item in collection, \"{0} does not contain {1}\".format(","        collection, item)","","","def test_not_in(collection, item):","    \"\"\"","    Check to ensure that a given collection does not contain a given value.","    Raises AssertionError if the `item` is found in `collection`","    `collection` is the collection in question","    `item` is the thing that we want to check for","    \"\"\"","    assert item not in collection, \"{0} is not in {1}\".format(","        item, collection)","","","def test_between(upper_limit, lower_limit, actual):","    \"\"\"","    Check to ensure that a number is between two other numbers. Raises","    AssertionError if the number is not between the other two numbers","    \"\"\"","    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)"]}]]},"ace":{"folds":[],"scrolltop":544.5,"scrollleft":0,"selection":{"start":{"row":48,"column":122},"end":{"row":48,"column":122},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1570701250228,"hash":"5407058c8b57dc0ac56b54ad47bc9699f0e97c37"}